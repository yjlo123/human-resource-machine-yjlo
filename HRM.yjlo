import HRMParser from "human-resource-machine-yjlo"
import ArrayList
import HashMap
import Util

class HRM {
	class _Command {
		var type, value, option
		@(t, v, o) {
			type = t
			value = v
			option = o
		}
		
		func toString() {
			return type 
					+ (value?(" "+value):"")
					+ (option?(" "+option):"")
		}
	}
	
	/* level defined var */
	DEBUG := null
	MAX_STEPS := null
	
	var commands		// HeapList
	var cl = []			// command list
	var map = HashMap()	// label map
	var floor			// array
	var pc = 1			// program counter
	
	size := 0
	speed := 0
	
	current := null
	
	/* ========== Command functions ========== */
	func addCommand(command_name, value, option) {
		cmd := _Command(command_name, value, option)
		cl = (cmd, cl)
		pc++
	}
	
	func label(name) {
		cmd := _Command("label")
		cmd.value = name
		cl = (cmd, cl)
		map.put(name, pc)
		pc++
	}
	
	/* ------- End of Command functions ------- */
	
	func parse(source, allowed) {
		P := HRMParser(source)
		lines := P.parse()

		while !lines.isEmpty {
			line := lines.head
			cmd := line.pull().val()

			if !line.isEmpty() && line.peek().val() == ":" {
				label(cmd)
				lines = lines.tail
				continue
			}

			if allowed.index(cmd) == -1 {
				throw("Invalid command: " + cmd)
			}
			switch cmd {
				case "inbox", "outbox" :
					addCommand(cmd)
				case "jump", "jumpz", "jumpn" :
					addCommand(cmd, line.peek().val())
				case "copyfrom", "copyto", "add", "sub", "bumpup", "bumpdn" :
					value := line.peek().val()
					if value.len > 2 && value[0] == "[" && value[value.len-1] == "]" {
						addCommand(cmd, value.substring(1, value.len-1), "[]")
					} else {
						addCommand(cmd, Util.atoi(value))
					}
				default :
					throw("Invalid command: " + cmd)
			}
			size++
			lines = lines.tail
		}
	}
	
	func initFloor(list) {
		floor = list
	}
	
	func getTargetFloorNumber(cmd) {
		index := cmd.value
		if cmd.option != null {
			index = floor.get(index)
		}
		return index
	}
	
	func run(in_list, out_fun) {
		i := 0 // program counter
		cl = cl.reversed
		commands = ArrayList(cl)
		
		func labelCheck(label_i, i, current_cmd_value) {
			if label_i == null {
				throw("[" + (i+1) + "] Invalid jump label: "
					+ current_cmd_value)
			}
		}
		
		while i < commands.size() {
			current_cmd := commands.get(i)
			
			if DEBUG {
				print("[" + speed + "] " + current_cmd.toString())
			}

			
			switch current_cmd.type {
				case "inbox" :
					if in_list.isEmpty {
						// all inputs are processed
						return
					}
					current = in_list.head
					in_list = in_list.tail
				case "outbox" :
					out_fun(current)
				case "jump" :
					label_i := map.get(current_cmd.value)
					labelCheck(label_i, i, current_cmd.value)
					i = label_i - 1
				case "jumpz" :
					if current == 0 {
						label_i := map.get(current_cmd.value)
						labelCheck(label_i, i, current_cmd.value)
						i = label_i - 1
					}
				case "jumpn" :
					if current < 0 {
						label_i := map.get(current_cmd.value)
						labelCheck(label_i, i, current_cmd.value)
						i = label_i - 1
					}
				case "copyfrom" :
					current = floor.get(getTargetFloorNumber(current_cmd))
				case "copyto" :
					target := getTargetFloorNumber(current_cmd)
					if target >= floor.size() {
						throw("["+(i+1)+"] Invalid floor number: " + target)
					}
					floor.put(target, current)
				case "add" :
					target := getTargetFloorNumber(current_cmd)
					current += floor.get(target)
				case "sub" :
					target := getTargetFloorNumber(current_cmd)
					floor_value := floor.get(target)
					if current.isString && floor_value.isString {
						current = current.charCode - floor_value.charCode
					} else {
						current -= floor_value
					}
				case "bumpup" :
					target := getTargetFloorNumber(current_cmd)
					new_value := floor.get(target) + 1;
					floor.put(target, new_value)
					current = new_value
				case "bumpdn" :
					target := getTargetFloorNumber(current_cmd)
					new_value := floor.get(target) - 1;
					floor.put(target, new_value)
					current = new_value
			}
			if current_cmd.type != "label" {
				speed++
				if speed > MAX_STEPS {
					print("Steps exceed maximum (" + MAX_STEPS + ").\nInfinite loop may be encountered.")
					break
				}
			}
			i++
		}
	}
}
