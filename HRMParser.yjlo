class Token {
	var _value
	@(v) {
		_value = v
	}
	func val() {
		return _value
	}
	func toString() {
		return _value
	}
}

class HRMParser {
	class _Line {
		var tokens = []
		@(inversed_l) {
			for t in inversed_l {
				tokens = (t, tokens)
			}
		}
		func peek() {
			return tokens.head
		}
		func pull() {
			var token = tokens.head
			tokens = tokens.tail
			return token
		}
		func isEmpty() {
			return tokens.isEmpty
		}
		func toString() {
			var str = "{"
			var ts = tokens
			for t in ts {
				str += (t.toString() + " ")
			}
			str += "}"
			return str
		}
	}
	
	var lines = []
	var source
	
	@(s) {
		source = s
	}
	
	func parse() {
		cl := source.toCharList // char list
		while !cl.isEmpty && (cl.head == ' ' || cl.head == '\n') {
			cl = cl.tail
		}
		var word = ""
		var word_l = []
		var line
		func addWord() {
			if word == "" { return }
			word_l = (Token(word), word_l)
			word = ""
		}
		func addLine() {
			if word_l.isEmpty { return }
			line = _Line(word_l)
			lines = (line, lines)
			word_l = []
		}
		
		while !cl.isEmpty {
			switch cl.head {
				case ' ' :
					addWord()
				case ':' :
					addWord()
					word = ':'
					addWord()
				case '\n' :
					addWord()
					addLine()
				case '#' :
					while !cl.isEmpty && cl.head != '\n' {
						cl = cl.tail
					}
				default:
					word += cl.head
			}
			cl = cl.tail
		}
		if word != "" {
			addWord()
			addLine()
		}
		return lines.reversed
	}
}
